# Validating Admission Policy
# Name: Restrict Container hostPort
#       Workloads (like pod, deployment, etc) that contain a container with hostport.
#       The problem that arises is that if the scale of your workload is larger than the number of nodes in your Kubernetes cluster, the deployment fails.
#       And any two workloads that specify the same HostPort cannot be deployed to the same node.
#       In addition, if the host where your pods are running becomes unavailable, Kubernetes reschedules the pods to different nodes.
#       Thus, if the IP address for your workload changes, external clients of your application will lose access to the pod.
#       The same thing happens when you restart your pods â€” Kubernetes reschedules them to a different node if available.
# Author: Abhijit Jadhav
# Docs: https://hub.armosec.io/docs/c-0044
# Severity: Medium

apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicyBinding
metadata:
  name: "vap-cis-restrict-hostport-policy-binding"
spec:
  policyName: "vap-cis-restrict-hostport-policy"
  validationActions: [Deny]
  paramRef:
    name: validation-parameters
    parameterNotFoundAction: "Deny"
  matchResources: {}

### The namespace exclusion logic now moved into CRD, Parameter and embeded in Policy. This gives more flexibility on managing and maintaing common exclusions
### You can still exclude additional app namespaces which are specific to the policy exclusion using following matchExpressions
###
# matchResources:
#   namespaceSelector:
#     matchExpressions:
#     - key: kubernetes.io/metadata.name
#       operator: NotIn
#       values:
#       - app-one-namespace
#       - app-two-namespace
###
### OR using labels
###
# matchResources:
#   namespaceSelector:
#     matchExpressions:
#       namsSpaceSelector:
#         matchLabels:
#           environment: prod

